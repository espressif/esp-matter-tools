diff --git a/mfg_tool/deps/mfg_gen.py b/mfg_tool/deps/mfg_gen.py
index b3a9e0b..31dce67 100644
--- a/mfg_tool/deps/mfg_gen.py
+++ b/mfg_tool/deps/mfg_gen.py
@@ -4,14 +4,25 @@
 # SPDX-License-Identifier: Apache-2.0
 #

+# Note: This file has following additional changes:
+# 1. Add option to skip generating nvs binary file.
+# 2. Replace print with logging.
+
 import argparse
 import csv
-import distutils.dir_util
+import logging
 import os
 from itertools import zip_longest
+from pathlib import Path

 import esp_idf_nvs_partition_gen.nvs_partition_gen as nvs_partition_gen

+# Supported log levels, mapping string values required for argument
+# parsing into logging constants
+__LOG_LEVELS__ = {
+    'info': logging.INFO,
+    'error': logging.ERROR,
+}

 def create_temp_files(args):
     new_filenames = []
@@ -64,15 +75,14 @@ def verify_keys_exist(values_file_keys, input_config_file):

         if keys_missing:
             for line_num, key in keys_missing:
-                print('Key:`', str(key), '` at line no:', str(line_num),
-                      ' in config file is not found in values file.')
+                logging.error(f"Key: `{key}` at line no: {line_num} in config file is not found in values file.")
             raise SystemExit(1)


 def verify_datatype_encoding(input_config_file):
     """ Verify datatype and encodings from config file is valid
     """
-    valid_encodings = {'string', 'binary', 'hex2bin','u8', 'i8', 'u16', 'u32', 'i32','base64'}
+    valid_encodings = {'string', 'binary', 'hex2bin','u8', 'i8', 'u16', 'u32', 'i32', 'u64', 'i64','base64'}
     valid_datatypes = {'file','data','namespace'}

     with open(input_config_file,'r') as config_file:
@@ -120,7 +130,7 @@ def verify_data_in_file(input_config_file, input_values_file, config_file_keys,
         verify_values_exist(input_values_file, keys_in_values_file)

     except Exception as err:
-        print(err)
+        logging.error(err)
         exit(1)


@@ -209,7 +219,7 @@ def create_dir(filetype, output_dir_path):
     """
     output_target_dir = os.path.join(output_dir_path,filetype,'')
     if not os.path.isdir(output_target_dir):
-        distutils.dir_util.mkpath(output_target_dir)
+        Path(output_target_dir).mkdir(parents=True)

     return output_target_dir

@@ -284,7 +294,11 @@ def create_intermediate_csv(args, keys_in_values_file, keys_repeat, is_encr=Fals

                 # Add values corresponding to each key to csv intermediate file
                 add_data_to_file(config_data_to_write, key_value_pair, output_csv_file)
-                print('\nCreated CSV file: ===>', output_csv_file)
+                logging.info(f"Created CSV file: ===> {output_csv_file}")
+
+                if not args.generate_bin:
+                    logging.info("Skipping NVS bin generation, generating only CSV files.")
+                    continue

                 # Verify if output bin file does not exist
                 bin_filename = args.prefix + '-' + file_identifier_value + '.' + 'bin'
@@ -302,10 +316,10 @@ def create_intermediate_csv(args, keys_in_values_file, keys_repeat, is_encr=Fals
                 else:
                     nvs_partition_gen.generate(args)

-            print('\nFiles generated in %s ...' % args.outdir)
+            logging.info('Files generated in %s ...' % args.outdir)

     except Exception as e:
-        print(e)
+        logging.error(e)
         exit(1)


@@ -366,7 +380,7 @@ def generate(args):
     encryption_enabled = False
     if (args.keygen or args.inputkey):
         encryption_enabled = True
-        print('\nGenerating encrypted NVS binary images...')
+        logging.info('Generating encrypted NVS binary images...')
     # Create intermediate csv file
     create_intermediate_csv(args, keys_in_values_file, keys_repeat, is_encr=encryption_enabled)

@@ -377,6 +391,9 @@ def generate_key(args):

 def main():
     try:
+        # Configure logging
+        logging.basicConfig(format='[%(asctime)s] [%(levelname)7s] - %(message)s', level=__LOG_LEVELS__[args.log_level])
+
         parser = argparse.ArgumentParser(description='\nESP Manufacturing Utility', formatter_class=argparse.RawTextHelpFormatter)
         subparser = parser.add_subparsers(title='Commands',
                                           dest='command',
@@ -444,6 +461,15 @@ def main():
         parser_gen.add_argument('--output',
                                 default=None,
                                 help=argparse.SUPPRESS)
+        parser_gen.add_argument('--no-bin',
+                                action='store_false',
+                                dest='generate_bin',
+                                help='Do not generate the factory partition binary')
+        parser_gen.add_argument('--log-level',
+                                default='info',
+                                choices=__LOG_LEVELS__.keys(),
+                                help='Set the log level (default: %(default)s)')
+
         parser_gen_key = subparser.add_parser('generate-key',
                                               help='Generate keys for encryption',
                                               formatter_class=argparse.RawTextHelpFormatter)
@@ -474,9 +500,9 @@ def main():
         args.func(args)

     except ValueError as err:
-        print(err)
+        logging.error(err)
     except Exception as e:
-        print(e)
+        logging.error(e)


 if __name__ == '__main__':
